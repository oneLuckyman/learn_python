# 语法糖：交换两个变量

a = 1 
b = 2

# 比较直接的写法是
c = a
a = b
b = c

'''
也可以使用异或交换两个变量的值

数学中异或的规则是：如果两个相同的值，结果为0 ，如果两个不同的值，结果为1
python 中的异或稍有不同，两个相同的值，结果仍为0
0 ^ 0 = 0
1 ^ 1 = 0
如果两个值不同，会先把两个值转换为二进制，然后按位异或
0 的二进制是 (0)0，1 的二进制是 (0)1, 2 的二进制是 10
0 ^ 1 = 1
0 ^ 2 = 00 ^ 10 = 10 = 2
1 ^ 2 = 01 ^ 10 = 11 = 3
3 的二进制是 (0)11, 4 的二进制是 100
3 ^ 4 = 011 ^ 100 = 111 = 7

因此可以得到推论，0 ^ x = x; x ^ x = 0
'''

# 所以使用异或交换两个变量的值
a = a ^ b
b = a ^ b
a = a ^ b

'''
这里可以这么理解
这里不再证明，但根据上面的例子，大致可以看出来，整数集合和异或运算可以构成一个阿贝尔群(group)，也就是说它具有下面五个性质

封闭性：所有元素都可以由群内的元素使用相应的群运算法则得到
结合律：A ^ (B ^ C) = (A ^ B) ^ C;
单位元：X ^ 0 = X;
逆元：X ^ X = 0;
交换律：A ^ B = B ^ A;

这个群单位元是0，每个元素的逆元是其自身，所以

a = a ^ b
b = a ^ b = a ^ b ^ b = a ^ (b ^ b) = a ^ 0 = a       # 注意第二个等号后的 a 指的是最开始的 a 而不是上一行已经被重新赋值的 a
a = a ^ b = a ^ b ^ a = b ^ (a ^ a) = b ^ 0 = b       # 注意第二个等号后的 b 指的是最开始的 b 而不是上一行已经被重新赋值的 b

所以，其实这种方法和最普通的使用中间变量的方法本质上很相似，只是用了一种人们比较陌生的运算法则，看似很高级而已

c = a ^ b
b = c ^ b = a
a = c ^ b = b

所以就算不使用异或群，而是使用同为阿贝尔群且性质相似的加法群或者乘法群也是同一个道理

a = a + b
b = a - b = a + b + (-b) = a      # -b 是 b 的逆元，因为 b + (-b) = 0。0 也是加法群中的单位元 0 + x = x
a = a - b = a + b + (-a) = b      # -a 是 a 的逆元

a = a * b
b = a * (1/b) = a * b * (1/b) = a    # 1/b 是 b 的逆元，因为 b * (1/b) = 1。1 是乘法群中的单位元 1 * x = x
a = a * (1/b) = a * b * (1/a) = b    # 1/a 是 a 的逆元
'''

# 如果使用语法糖，简单易懂
a, b = b, a